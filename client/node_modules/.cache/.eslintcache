[{"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/index.js":"1","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/App.js":"2","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/BodyContainer.js":"3","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/NavBar.js":"4","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/pages/Homepage.js":"5","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/pages/LocationPage.js":"6","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/Login.js":"7","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/Signup.js":"8","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/utils/mutations.js":"9","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/utils/auth.js":"10"},{"size":203,"mtime":1629154757000,"results":"11","hashOfConfig":"12"},{"size":1107,"mtime":1629159270000,"results":"13","hashOfConfig":"12"},{"size":759,"mtime":1629156077000,"results":"14","hashOfConfig":"12"},{"size":655,"mtime":1629156077000,"results":"15","hashOfConfig":"12"},{"size":356,"mtime":1629156735000,"results":"16","hashOfConfig":"12"},{"size":62,"mtime":1629154757000,"results":"17","hashOfConfig":"12"},{"size":2718,"mtime":1629156969000,"results":"18","hashOfConfig":"12"},{"size":3393,"mtime":1629156970000,"results":"19","hashOfConfig":"12"},{"size":505,"mtime":1629156950000,"results":"20","hashOfConfig":"12"},{"size":1234,"mtime":1629154757000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"19c43d9",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/index.js",[],["46","47"],"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/App.js",[],"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/BodyContainer.js",[],["48","49"],"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/NavBar.js",[],"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/pages/Homepage.js",[],"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/pages/LocationPage.js",[],"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/Login.js",["50"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation} from '@apollo/client';\nimport { LOGIN_USER} from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Login = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await loginUser({\n        variables: {...userFormData}\n      });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default Login;\n","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/component/Signup.js",["51"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER} from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await addUser({\n        variables: {...userFormData}\n      });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default Signup;","/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/utils/mutations.js",[],"/Users/gojiboy/Desktop/Bootcamp/Week-23/travlr-project/client/src/utils/auth.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"52","replacedBy":"56"},{"ruleId":"54","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":12,"column":23,"nodeType":"60","messageId":"61","endLine":12,"endColumn":28},{"ruleId":"58","severity":1,"message":"59","line":15,"column":21,"nodeType":"60","messageId":"61","endLine":15,"endColumn":26},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],["62"],["63"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]